{"version":3,"sources":["chart.js","btc.js","ltc.js","eth.js","index.js"],"names":["Chart","props","react_default","a","createElement","es","data","options","BtcApp","state","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","_this","theme","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","lineTension","scales","yAxes","display","ticks","suggestedMin","beginAtZero","animation","duration","hover","animationDuration","responsiveAnimationDuration","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","xAxes","autoSkip","maxTicksLimit","_this2","this","subscribe","channels","name","product_ids","websock","WebSocket","onopen","send","JSON","stringify","onmessage","e","value","parse","product_id","oldBtcDataSet","newBtcDataSet","Object","objectSpread","push","price","newBtcChartData","concat","Date","toLocaleTimeString","setState","close","classes","className","chart","React","Component","withStyles","chart-container","height","withTheme","LtcApp","oldLtcDataSet","newLtcDataSet","newLtcChartData","EthApp","oldEthDataSet","newEthDataSet","newEthChartData","createMuiTheme","ReactDOM","render","styles","btc","ltc","eth","document","getElementById"],"mappings":"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","file":"static/js/main.befd5f5b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst Chart = props => <Line data={props.data} options={props.options} />;\n\nexport default Chart;","import React from \"react\";\n// import { render } from \"react-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 300\n  }\n});\n\n//The states describes the structure of our state in our app\nclass BtcApp extends React.Component {\n  state = {\n    lineChartData: {\n      labels: [],\n      datasets: [\n        {\n          data: [],\n          type: \"line\",\n          label: \"BTC-USD\",\n          backgroundColor: \"rgba(255,255,0,1)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"1\",\n          lineTension: 0.45,\n          options:{\n            scales: {\n                yAxes: [{\n                    display: true,\n                    ticks: {\n                        suggestedMin: 0,    // minimum will be 0, unless there is a lower value.\n                        // OR //\n                        beginAtZero: true   // minimum value will be 0.\n                    }\n                }]\n            },\n            animation: {\n              duration: 0, // general animation time\n            },\n            hover: {\n                animationDuration: 0, // duration of animations when hovering an item\n            },\n            responsiveAnimationDuration: 0,\n\n          }\n        },\n  \n      ]\n    },\n    lineChartOptions: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        enabled: true\n      },\n      scales: {\n        xAxes: [\n          {\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 50\n            }\n          }\n        ]\n      }\n    }\n  };\n\n  //\n\n  componentDidMount() {\n    const subscribe = {\n      type: \"subscribe\",\n      channels: [\n        {\n          name: \"ticker\",\n          product_ids: [\"BTC-USD\"]\n        },\n\n      ]\n    };\n\n    this.websock = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    this.websock.onopen = () => {\n      this.websock.send(JSON.stringify(subscribe));\n    };\n\n    this.websock.onmessage = e => {\n      const value = JSON.parse(e.data);\n      // console.log(value)\n      if (value.type !== \"ticker\" && value.product_id === \"LTC-USD\") {\n        return;\n      }\n      //BTC\n\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\n      const newBtcDataSet = { ...oldBtcDataSet };\n      newBtcDataSet.data.push(value.price);\n\n      // const oldLtcDataSet = this.state.lineChartData.datasets[1];\n      // const newLtcDataSet = { ...oldLtcDataSet };\n      // newLtcDataSet.data.push(value.price);\n\n\n      const newBtcChartData = {\n        ...this.state.lineChartData,\n        datasets: [newBtcDataSet],\n        labels: this.state.lineChartData.labels.concat(\n          new Date().toLocaleTimeString()\n        )\n      };\n      // const newLtcChartData = {\n      //   ...this.state.lineChartData,\n      //   datasets: [newLtcDataSet],\n      //   labels: this.state.lineChartData.labels.concat(\n      //     new Date().toLocaleTimeString()\n      //   )\n      // };\n      this.setState({ lineChartData: newBtcChartData });\n\n      // this.setState({ lineChartData: newLtcChartData });\n\n\n    };\n  }\n\n  componentWillUnmount() {\n    this.websock.close();\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n      \n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(BtcApp);","import React from \"react\";\n// import { render } from \"react-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 300\n  }\n});\n\n//The states describes the structure of our state in our app\nclass LtcApp extends React.Component {\n  state = {\n    lineChartData: {\n      labels: [],\n      datasets: [\n        {\n          data: [],\n          type: \"line\",\n          label: \"LTC-USD\",\n          backgroundColor: \"rgba(51,0,255,1)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"1\",\n          lineTension: 0.2,\n          options:{\n            scales: {\n                yAxes: [{\n                    display: true,\n                    ticks: {\n                        suggestedMin: 0,    // minimum will be 0, unless there is a lower value.\n                        // OR //\n                        beginAtZero: true   // minimum value will be 0.\n                    }\n                }]\n            },\n            animation: {\n              duration: 0, // general animation time\n            },\n            hover: {\n                animationDuration: 0, // duration of animations when hovering an item\n            },\n            responsiveAnimationDuration: 0,\n          }\n        },\n      ]\n    },\n    lineChartOptions: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        enabled: true\n      },\n      scales: {\n        xAxes: [\n          {\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 100\n            }\n          }\n        ]\n      }\n    }\n  };\n\n  //\n\n  componentDidMount() {\n    const subscribe = {\n      type: \"subscribe\",\n      channels: [\n        {\n          name: \"ticker\",\n          product_ids: [\"LTC-USD\"]\n        },\n      ]\n    };\n\n    this.websock = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    this.websock.onopen = () => {\n      this.websock.send(JSON.stringify(subscribe));\n    };\n\n    this.websock.onmessage = e => {\n      const value = JSON.parse(e.data);\n      if (value.type !== \"ticker\") {\n        return;\n      }\n\n    //   LTC\n    // console.log(this.state.lineChartData.datasets)\n      const oldLtcDataSet = this.state.lineChartData.datasets[0]\n      const newLtcDataSet = {...oldLtcDataSet };\n      newLtcDataSet.data.push(value.price);\n\n      const newLtcChartData = {\n        ...this.state.lineChartData,\n        datasets: [newLtcDataSet],\n        labels: this.state.lineChartData.labels.concat(\n          new Date().toLocaleTimeString()\n        )\n      };\n      this.setState({ lineChartData: newLtcChartData });\n\n    };\n  }\n\n  componentWillUnmount() {\n    this.websock.close();\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n      \n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(LtcApp);","import React from \"react\";\n// import { render } from \"react-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 300\n  }\n});\n\n//The states describes the structure of our state in our app\nclass EthApp extends React.Component {\n  state = {\n    lineChartData: {\n      labels: [],\n      datasets: [\n        {\n          data: [],\n          type: \"line\",\n          label: \"ETH-USD\",\n          backgroundColor: \"rgba(0,255,51,0.2)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"1\",\n          lineTension: 0.2,\n          options:{\n            scales: {\n              yAxes: [{\n                  display: true,\n                  ticks: {\n                      suggestedMin: 0,    // minimum will be 0, unless there is a lower value.\n                      // OR //\n                      beginAtZero: true   // minimum value will be 0.\n                  }\n              }]\n          },\n            animation: {\n              duration: 0, // general animation time\n            },\n            hover: {\n                animationDuration: 0, // duration of animations when hovering an item\n            },\n            responsiveAnimationDuration: 0,\n          }\n        },\n      ]\n    },\n    lineChartOptions: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        enabled: true\n      },\n      scales: {\n        xAxes: [\n          {\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 100\n            }\n          }\n        ]\n      }\n    }\n  };\n\n  //\n\n  componentDidMount() {\n    const subscribe = {\n      type: \"subscribe\",\n      channels: [\n        {\n          name: \"ticker\",\n          product_ids: [\"ETH-USD\"]\n        },\n      ]\n    };\n\n    this.websock = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    this.websock.onopen = () => {\n      this.websock.send(JSON.stringify(subscribe));\n    };\n\n    this.websock.onmessage = e => {\n      const value = JSON.parse(e.data);\n      if (value.type !== \"ticker\") {\n        return;\n      }\n\n    //   LTC\n    // console.log(this.state.lineChartData.datasets)\n      const oldEthDataSet = this.state.lineChartData.datasets[0]\n      const newEthDataSet = {...oldEthDataSet };\n      newEthDataSet.data.push(value.price);\n\n      const newEthChartData = {\n        ...this.state.lineChartData,\n        datasets: [newEthDataSet],\n        labels: this.state.lineChartData.labels.concat(\n          new Date().toLocaleTimeString()\n        )\n      };\n      this.setState({ lineChartData: newEthChartData });\n\n    };\n  }\n\n  componentWillUnmount() {\n    this.websock.close();\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n      \n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(EthApp);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport BtcApp from \"./btc\";\nimport LtcApp from \"./ltc\"\nimport EthApp from \"./eth\"\n\n\nconst theme = createMuiTheme();\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <BtcApp />\n    <LtcApp />\n    <EthApp />\n\n  </MuiThemeProvider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}